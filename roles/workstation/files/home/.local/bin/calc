#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# a simple command-line calculator
#
# Copyright (c) Zhangyuan Nie. All rights reserved. MIT license.

import re
from cmd import Cmd
from math import *
from fractions import Fraction


def binom(n, r):
    return factorial(n) // factorial(r) // factorial(n - r)


def to_frac(d):
    return Fraction(f"{d}")


def print_green(o):
    print(f"\u001b[92m{o}\u001b[0m")


def print_red(o):
    print(f"\u001b[91m{o}\u001b[0m")


def close_brackets(s: str) -> str:
    n = 0
    for c in s:
        if c == "(":
            n += 1
        elif c == ")":
            n -= 1
    if n > 0:
        return s + n * ")"
    return s


class Calc(Cmd):
    prompt = "> "

    def __init__(self):
        super().__init__()
        self.ctx = globals()

    def cmdloop(self):
        while True:
            try:
                super().cmdloop()
                break
            except KeyboardInterrupt:
                print("^C")

    def precmd(self, line: str):
        l = line.strip().replace("^", "**")
        if l.startswith(("+", "-", "*", "/")):
            l = "ans" + l
        return close_brackets(l)

    def default(self, line):
        try:
            self.ctx["ans"] = eval(line, self.ctx)
        except Exception as e:
            print_red(e)
        else:
            print_green(self.ctx["ans"])

    def do_exec(self, arg, var=None):
        try:
            exec(arg, self.ctx)
        except Exception as e:
            print_red(e)
        else:
            if var:
                print_green(self.ctx[var])
            else:
                print_green("Done")

    def do_let(self, arg):
        arrow_str = "=>"
        try:
            name, value = [a.strip() for a in arg.split("=", 1)]
        except ValueError:
            print("`let x = 1` to define a variable")
            print(f"`let add = (x,y) {arrow_str} x + y` to define a function")
        else:
            if arrow_str in value:
                params, body = value.split(arrow_str, 1)
                if params.startswith("(") and params.endswith(")"):
                    params = params[1:-1]
                self.do_exec(f"{name}=lambda {params}: {body}", name)
            else:
                self.do_exec(f"{name}={value}", name)

    def do_quit(self, arg):
        return True

    def do_EOF(self, arg):
        print("quit")
        return True


if __name__ == "__main__":
    Calc().cmdloop()
